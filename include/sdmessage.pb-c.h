/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: sdmessage.proto */

#ifndef PROTOBUF_C_sdmessage_2eproto__INCLUDED
#define PROTOBUF_C_sdmessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _SDMessage SDMessage;


/* --- enums --- */

typedef enum _SDMessage__Opcode {
  SDMESSAGE__OPCODE__OP_BAD = 0,
  SDMESSAGE__OPCODE__OP_SIZE = 10,
  SDMESSAGE__OPCODE__OP_DEL = 20,
  SDMESSAGE__OPCODE__OP_GET = 30,
  SDMESSAGE__OPCODE__OP_PUT = 40,
  SDMESSAGE__OPCODE__OP_GETKEYS = 50,
  SDMESSAGE__OPCODE__OP_ERROR = 99
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SDMESSAGE__OPCODE)
} SDMessage__Opcode;
typedef enum _SDMessage__CType {
  SDMESSAGE__C_TYPE__CT_BAD = 0,
  SDMESSAGE__C_TYPE__CT_KEY = 10,
  SDMESSAGE__C_TYPE__CT_VALUE = 20,
  SDMESSAGE__C_TYPE__CT_ENTRY = 30,
  SDMESSAGE__C_TYPE__CT_KEYS = 40,
  SDMESSAGE__C_TYPE__CT_RESULT = 50,
  SDMESSAGE__C_TYPE__CT_NONE = 60
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SDMESSAGE__C_TYPE)
} SDMessage__CType;

/* --- messages --- */

struct  _SDMessage
{
  ProtobufCMessage base;
  SDMessage__Opcode opcode;
  SDMessage__CType c_type;
  int32_t data_size;
  char *data;
  int32_t result;
  char *key;
  int32_t numkeys;
  size_t n_keys;
  char **keys;
  int32_t op_n;
};
#define SDMESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sdmessage__descriptor) \
    , SDMESSAGE__OPCODE__OP_BAD, SDMESSAGE__C_TYPE__CT_BAD, 0, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, 0, 0,NULL, 0 }


/* SDMessage methods */
void   sdmessage__init
                     (SDMessage         *message);
size_t sdmessage__get_packed_size
                     (const SDMessage   *message);
size_t sdmessage__pack
                     (const SDMessage   *message,
                      uint8_t             *out);
size_t sdmessage__pack_to_buffer
                     (const SDMessage   *message,
                      ProtobufCBuffer     *buffer);
SDMessage *
       sdmessage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sdmessage__free_unpacked
                     (SDMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*SDMessage_Closure)
                 (const SDMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor sdmessage__descriptor;
extern const ProtobufCEnumDescriptor    sdmessage__opcode__descriptor;
extern const ProtobufCEnumDescriptor    sdmessage__c_type__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_sdmessage_2eproto__INCLUDED */
